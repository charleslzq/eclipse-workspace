package src.tool;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.pdfbox.pdmodel.PDPage;

public class ContentStreamParser {
	private PDPage pdpage;
	private TokenParser tp;
	private List<PageTextArea> pta;
	private TextStripperByRectangleObject tsbro;
	private int precision = 2;
	private double err = 0.1;
	
	public ContentStreamParser(PDPage pdp) throws IOException{
		pdpage = pdp;
		tp = new TokenParser(pdpage.getContents().getStream().getStreamTokens());
		//tp.print();
		
		tsbro = new TextStripperByRectangleObject();
		
		pta = new ArrayList<PageTextArea>();//this.constructRegions(tp.getAreas());
		
		this.constructTable();
		//tsbro.print();
		//this.extraTextsAfterLastTable();
		
	}
	
	public int getPrecision() {
		return precision;
	}

	public void setPrecision(int precision) {
		this.precision = precision;
	}

	public double getErr() {
		return err;
	}

	public void setErr(double err) {
		this.err = err;
	}
	
	public void constructTable() throws IOException{
		pta = this.PageAreaConstructor();
	}

	public List<PageTextArea> PageAreaConstructor() throws IOException{
		Map<Integer, RectangleObject> areas = tp.getAreas();
		//Map<Integer, TextObject> texts = tp.getTexts();
		List<PageTextArea> textAreas = this.constructRegions(areas);
		this.findSplittedInformation(textAreas);
		this.simplifyPositions(textAreas);
		int last = 0;

		for(int i = 0; i < tp.getSize(); i++){
			if(areas.containsKey(new Integer(i))){
				tsbro.addRegion(i, areas.get(new Integer(i)));
				//last = i;
			}
		}
		
		/*if(last !=0 && areas != null){
			RectangleObject lastRo = areas.get(new Integer(last));
			double y = lastRo.getYofLeftUpper() - lastRo.getHeight();
			double w = pdpage.getArtBox().getWidth();
			RectangleObject extra = new RectangleObject(0,0,w,y);
			tsbro.addRegion(-1, extra);
		}*/
		
		tsbro.extractRegions(pdpage);
		/*for(int i = 0; i < textAreas.size() ; i++){
			int no = textAreas.get(i).getAreaNo();
			String text = tsbro.getTextForRegion(no);
			textAreas.get(i).setText(text);
			//System.out.println(no+":"+text);
		}*/
		//tsbro.print();
		attachTexts(textAreas);
		/*for( int i = 0; i < textAreas.size(); i++)
			textAreas.get(i).print();*/
		return textAreas;
	}
	
	private List<PageTextArea> constructRegions(Map<Integer, RectangleObject> areas){
		List<PageTextArea> textAreas = new ArrayList<PageTextArea>();
		for(int i = 0; i < tp.getSize(); i++)
			if(areas.containsKey(new Integer(i))){
				textAreas.add(new PageTextArea(i, areas.get(new Integer(i))));
				//System.out.println(i);
			}
		for(int i = 0; i < textAreas.size(); i++)
			for(int j = i+1 ; j < textAreas.size(); j++){
				if( textAreas.get(i).getRight() == null && textAreas.get(i).nextColumnInTheSameRow(textAreas.get(j))){
					textAreas.get(i).setRight(textAreas.get(j));
					textAreas.get(j).setReferenced(true);
				}
				else if( textAreas.get(i).getDown() == null && textAreas.get(i).nextRowInTheSameColumn(textAreas.get(j))){
					textAreas.get(i).setDown(textAreas.get(j));
					textAreas.get(j).setReferenced(true);
				}
			}
		return textAreas;
	}
	
	private void findSplittedInformation(List<PageTextArea> textAreas){
		for(int i = 0; i < textAreas.size(); i++){
			PageTextArea current = textAreas.get(i);
			if( current.getRight() != null){
				int n = precision;
				if(alreadyEqual(current.getHeight(), current.getRight().getHeight(), err))
					current.getRight().setSplitedRows(current.getSplitedRows());
				else{
					double sum = current.getRight().getHeight()/current.getHeight();
					current.getRight().setSplitedRows(round(current.getSplitedRows()*sum,n));
					if( sum < 1){
						PageTextArea next = current.getRight();
						while( sum < 1){
							if(next.getDown() != null){
								double tmp = next.getDown().getHeight()/current.getHeight();
								sum += tmp;
								if(alreadyEqual(sum,1,Math.exp(-(n-1)))){
									next.getDown().setSplitedRows(round(1-sum+tmp,n)*current.getSplitedRows());
									break;
								}
								next.getDown().setSplitedRows(round(tmp*current.getSplitedRows(),n));
								next = next.getDown();
							}
							else
								break;
						}
					}
				}
			}
			if( current.getDown() != null){
				int n = precision;
				if(alreadyEqual(current.getWidth(), current.getDown().getWidth(), err))
					current.getDown().setSplitedCols(current.getSplitedCols());
				else{
					double sum = current.getDown().getWidth()/current.getWidth();
					current.getDown().setSplitedCols(round(current.getSplitedCols()*sum,n));
					if(sum < 1){
						PageTextArea next = current.getDown();
						while(sum < 1){
							if(next.getRight() != null){
								double tmp = next.getRight().getWidth()/current.getWidth();
								sum += tmp;
								if(alreadyEqual(sum, 1, Math.exp(-(n-1)))){
									next.getRight().setSplitedCols(round(1-sum+tmp,n)*current.getSplitedCols());
									break;
								}
								next.getRight().setSplitedCols(round(tmp*current.getSplitedCols(),n));
								next = next.getRight();
							}
							else
								break;
						}
					}
				}
			}
		}
	}
	
	private void simplifyPositions(List<PageTextArea> textAreas){
		int col = 0;
		int row = 0;
		for(int i = 0; i < textAreas.size() ; i++){
			if(textAreas.get(i).nullColRow()){
				textAreas.get(i).recursiveSetColAndRowNo(col, row, 2);
				if(textAreas.get(i).isIsolated() == true)
					row = 0;
			}
		}
	}
	
	private void attachTexts(List<PageTextArea> textAreas){
		for(int i = 0; i < textAreas.size(); i++){
			int no = textAreas.get(i).getAreaNo();
			List<CharacterObject> cs = tsbro.getCharactersByRegion(no);
			System.out.println(textAreas.get(i).getString());
			textAreas.get(i).print();
			for(int j = 0; j < cs.size(); j++)
				System.out.println(i+" "+" "+j+" "+no+" "+cs.get(j).getCharacter());
			textAreas.get(i).setCharacters(this.tsbro.getCharactersByRegion(no));
			System.out.println(textAreas.get(i).getString());
		}
	}
	
	public double round(double a, int n){
		BigDecimal b = new BigDecimal(a);
		double f = b.setScale(n, BigDecimal.ROUND_HALF_UP).doubleValue();
		return f;
	}
	
	public boolean alreadyEqual(double a, double b, double err){
		if(Math.abs(a-b) <= err)
			return true;
		return false;
	}
	
	public List<PageTextArea> getPTA(){
		return pta;
	}
	
	public List<TableInformation> extractTableInformation(){
		List<TableInformation> ti = new ArrayList<TableInformation>();
		for(int i = 0; i < pta.size(); i++){
			if(!pta.get(i).isReferenced()){
				if(!pta.get(i).isIsolated()){
					PageTextArea head = pta.get(i);
					PageTextArea current = head;
					List<Float> ls1 = new ArrayList<Float>();
					List<Float> ls2 = new ArrayList<Float>();
					List<String> ls3 = new ArrayList<String>();
					int count1 = 0;
					int count2 = 0;
					while(current != null){
						count1++;
						ls1.add(new Float(current.getX()));
						ls3.add(current.getString());
						current = current.getRight();
					}
					current = head;
					while(current.getDown()!=null)
						current = current.getDown();
					while(current!=null){
						count2++;
						ls2.add(new Float(current.getX()));
						PageTextArea tmp = current.getRight();
						if(tmp!=null){
							while(tmp.getDown() != null)
								tmp = tmp.getDown();
							current = tmp;
						}
						else
							break;
					}
					ti.add(new TableInformation(count1,count2,ls1,ls2,ls3));
				}
			}
		}
		return ti;
	}
	
	public boolean extraTextsAfterLastTable(){
		if(tsbro.contain(-1)){
			String text = tsbro.getTextForRegion(-1);
			if(text.equals(" "))
				return false;
		}
		return true;
	}
}
