package src.processing;

import java.awt.geom.Rectangle2D;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.common.PDRectangle;

import src.tool.PDFCharacter;
import src.tool.PDFCharacterBag;
import src.tool.PDFRectangle;
import src.tool.PDFTable;
import src.tool.PageTextArea;
import src.tool.TextStripperByPDFRectangle;

public class TextPositionExtractor extends BasicTableExtractor {
	
	/**
	 * The page that would be processed.
	 */
	private PDPage pdpage;
	
	/**
	 * The constructor use a page to initialize this class.
	 * @param page The page that would be processed.
	 * @throws IOException
	 */
	public TextPositionExtractor(PDPage page) throws IOException{
		pdpage = page;
	}

	@Override
	public List getTokens(PDPage page) throws IOException {
		// TODO Auto-generated method stub
		TextStripperByPDFRectangle ts = new TextStripperByPDFRectangle();
		PDRectangle pd = pdpage.getMediaBox();
		PDFRectangle p = new PDFRectangle(pd.getLowerLeftX(),pd.getLowerLeftY(),pd.getWidth(),pd.getHeight());
		
		ts.addRegion(-1, p);
		ts.extractRegions(pdpage);
		return ts.getCharactersByRegion(-1);
	}

	@Override
	public List<PageTextArea> getAreas(List tokens) {
		// TODO Auto-generated method stub
		List<PDFCharacterBag> bags = this.formBags((List<PDFCharacter>)tokens);
		return null;
	}
	
	
	/**
	 * This method will be used to extract consecutive characters and form character bags.
	 * @param tokens The list of characters.
	 * @return The list of character bags.
	 */
	private List<PDFCharacterBag> formBags(List<PDFCharacter> cs) {
		// TODO Auto-generated method stub
		sortChar(cs);
		List<PDFCharacterBag> bags = new ArrayList<PDFCharacterBag>();
		PDFCharacterBag now = null;
		for(int i=0; i<cs.size(); i++){
			if(i == 0){
				now = new PDFCharacterBag();
				bags.add(now);
				now.addCharacter(cs.get(i));
				continue;
			}
			if(now.isNextInTheSameRow(cs.get(i)))
				now.addCharacter(cs.get(i));
			else{
				now = new PDFCharacterBag();
				bags.add(now);
				now.addCharacter(cs.get(i));
			}
			
		}
		return bags;
	}
	
	/**
	 * This method is used to sort characters, from up to down, and from left to right.
	 * @param cs The list of characters.
	 */
	public void sortChar(List<PDFCharacter> cs){
		for(int i=0; i<cs.size()-1; i++){
			PDFCharacter min = cs.get(i);
			int index = i;
			for(int j=i+1; j<cs.size();j++){
				PDFCharacter it = cs.get(j);
				if(it.isHigherLefter(min)){
					min = it;
					index = j;
				}
			}
			if(i != index){
				cs.set(index, cs.get(i));
				cs.set(i, min);
			}
		}
	}

	@Override
	public void removeUselessRegions(List<PageTextArea> areas) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void attachTexts(List<PageTextArea> areas) throws Exception {
		// TODO Auto-generated method stub
		
	}

	@Override
	public List<PDFTable> getTables(PDPage page) throws Exception {
		// TODO Auto-generated method stub
		return null;
	}
	
	
	/**
	 * This method will convert a character-bag to a PageTextArea.
	 * @param no The No will be assigned to.
	 * @param bag The bag that will be transformed.
	 * @return The PageTextArea generated from the bag.
	 */
	private PageTextArea convertToTextArea(int no, PDFCharacterBag bag) {
		// TODO Auto-generated method stub
		if(bag == null)
			return null;
		PageTextArea p = new PageTextArea(2*tp.getSize()+no,
				new PDFRectangle(bag.getX(),
						bag.getY(),
						bag.getWidth(),
						bag.getHeight()));
		p.setCharacters(bag.getCharacters());
		return p;
	}
	
	/**
	 * This method converts a list of character bags to a list of PageTextArea.
	 * @param bags The list of character bags.
	 * @return The list of PageTextArea generated.
	 */
	private List<PageTextArea> formTextAreaFromBags(List<PDFCharacterBag> bags){
		List<PageTextArea> areas = new ArrayList<PageTextArea>();
		for(int i=0; i<bags.size(); i++)
			areas.add(convertToTextArea(i, bags.get(i)));
		this.sort(areas);
		return areas;
	}

}
