package src.tool;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.dom4j.Element;

public class PageTextArea {
	private int areaNo;
	private double colNo;
	private double rowNo;
	
	private RectangleObject area;
	//private List<TextObject> texts;
	private List<CellLine> lines;
	private List<CharacterGroup> groups;
	private List<CharacterObject> characters;
	
	private PageTextArea right;
	private PageTextArea down;
	
	double splitedRows;
	double splitedCols;
	
	boolean referenced;
	
	public PageTextArea(int n, RectangleObject ro){
		areaNo = n;
		colNo = 0;
		rowNo = 0;
		
		splitedRows = 1;
		splitedCols = 1;
		
		area = ro;
		//lines = new ArrayList<CellLine>();
		//groups = new ArrayList<CharacterGroup>();
		//texts = new ArrayList<TextObject>();
		characters = new ArrayList<CharacterObject>();
		
		right = null;
		down = null;
		
		referenced = false;
	}
	
	
	
	public boolean isReferenced() {
		return referenced;
	}



	public void setReferenced(boolean referenced) {
		this.referenced = referenced;
	}



	/*public void putText(TextObject to){
		texts.add(to);
	}*/
	
	public void setRight(PageTextArea r){
		right = r;
	}
	
	public void setDown(PageTextArea d){
		down = d;
	}
	
	public PageTextArea getRight(){
		return right;
	}
	
	public PageTextArea getDown(){
		return down;
	}
	
	public boolean isSameRow(PageTextArea pta){
		if(area.isSameRow(pta.getArea()))
			return true;
		return false;
	}
	
	public boolean isSameColumn(PageTextArea pta){
		if(area.isSameColumn(pta.getArea()))
			return true;
		return false;
	}
	
	public PageTextArea nextRight(){
		return right;
	}
	
	public RectangleObject getArea(){
		return area;
	}
	
	public void print(){
		System.out.println("Area No: " + areaNo);
		System.out.println("Column No: " + colNo);
		System.out.println("Row No: " + rowNo);
		//area.print();
		if( right != null)
			System.out.println("Right: " + right.getAreaNo());
		if( down != null)
			System.out.println("Down: " + down.getAreaNo());
	}
	
	public int getAreaNo(){
		return areaNo;
	}
	
	public void setColNo(int n){
		colNo = n;
	}
	
	public void setRowNo(int n){
		rowNo = n;
	}
	
	public double getColNo(){
		return colNo;
	}
	
	public double getRowNo(){
		return rowNo;
	}
	
	public void recursiveSetColAndRowNo(double c, double r, int n){
		colNo = c;
		rowNo = r;
		if(this.getRight() != null)
			this.getRight().recursiveSetColAndRowNo(round(c+this.splitedCols,n), r, n);
		if(this.getDown() != null)
			this.getDown().recursiveSetColAndRowNo(c, round(r+this.splitedRows,n),n);
		
	}
	

	public boolean nullColRow(){
		if( colNo != 0)
			return false;
		if( rowNo != 0)
			return false;
		return true;
	}
	

	public double getSplitedRows() {
		return splitedRows;
	}

	public void setSplitedRows(double splitedRows) {
		this.splitedRows = splitedRows;
	}

	public double getSplitedCols() {
		return splitedCols;
	}

	public void setSplitedCols(double splitedCols) {
		this.splitedCols = splitedCols;
	}

	public double getHeight(){
		return area.getHeight();
	}
	
	public double getWidth(){
		return area.getWidth();
	}

	public boolean nextColumnInTheSameRow(PageTextArea pageTextArea) {
		// TODO Auto-generated method stub
		if( area.nextColumnInTheSameRow(pageTextArea.getArea()))
			return true;
		return false;
	}

	public boolean nextRowInTheSameColumn(PageTextArea pageTextArea) {
		// TODO Auto-generated method stub
		if( area.nextRowInTheSameColumn(pageTextArea.getArea()))
			return true;
		return false;
	}
	
	public boolean isIsolated(){
		if( right != null)
			return false;
		if( down != null)
			return false;
		return true;
	}
	
	public boolean isInThisArea(double x, double y){
		return area.isInThisRectangle(x, y);
	}
	
	/*public boolean isInThisArea(TextObject to){
		return area.isInThisRectangle(to.getX(), to.getY());
	}
	
	public boolean nullText(){
		if(texts.size() == 0)
			return true;
		return false;
	}
	
	public int textSize(){
		return texts.size();
	}
	
	public TextObject getText(int i){
		return texts.get(i);
	}*/
	
	/*public int textSize(){
		return characters.size();
	}*/
	
	public double getX(){
		return area.getXofLeftUpper();
	}
	
	public double getY(){
		return area.getYofLeftUpper();
	}
	
	public String getString(){
		String s = "";
		for(int i = 0; i < characters.size(); i++)
			s += characters.get(i).getCharacter();
		return s;
	}
	
	public void setCharacters(List<CharacterObject> characters){
		this.characters = characters;
	}
	
	public List<CellLine> formMultipleLines() {
		//this.characters = characters;
		if(characters.size() == 0)
			return null;
		List<CharacterGroup> groups = new ArrayList<CharacterGroup>();
		CharacterGroup current = new CharacterGroup(characters.get(0));
		groups.add(current);
		boolean newGroup = false;
		int last = 0;
		if(characters.size() > 1){
			for(int i = 1; i < characters.size(); i++){
				if( characters.get(last).isNextInTheSameLine(characters.get(i)) && characters.get(i).getCharacter().equals(" ") == false){
					current.addCharacter(characters.get(i));
					last = i;
				}
				else if(characters.get(i).getCharacter().equals(" ") == true){
					newGroup = true;
					continue;
				}
				else if(newGroup == true && characters.get(i).getCharacter().equals(" ") == false){
					last = i;
					current = new CharacterGroup(characters.get(i));
					groups.add(current);
					newGroup = false;
				}
				else if(characters.get(last).isNextInTheSameLine(characters.get(i)) == false){
					current = new CharacterGroup(characters.get(i));
					groups.add(current);
					last = i;
				}
			}
		}
		int cellNo = 1;
		CellLine currentLine = new CellLine(cellNo,groups.get(0));
		lines.add(currentLine);
		if(groups.size() > 1){
			//System.out.println(groups.size());
			for(int i = 1; i < groups.size(); i++){
				if( groups.get(i-1).isInTheSameLine(groups.get(i)) )
					currentLine.addGroup(groups.get(i));
				else{
					cellNo++;
					currentLine = new CellLine(cellNo, groups.get(i));
					lines.add(currentLine);
				}
			}
		}
		return lines;
	}



	public double round(double a, int n){
		BigDecimal b = new BigDecimal(a);
		double f = b.setScale(n, BigDecimal.ROUND_HALF_UP).doubleValue();
		return f;
	}
	
	public void writeToXML(Element currentTable){
		Element tmp = currentTable.addElement("Cell");
		tmp.addAttribute("No", this.getAreaNo()+"");
		Element areaPosition = tmp.addElement("AreaPosition");
		Element xOfLeftUpper = areaPosition.addElement("XofLeftUpper");
		xOfLeftUpper.addText(this.getX()+"");
		Element yOfLeftUpper = areaPosition.addElement("YofLeftUpper");
		yOfLeftUpper.addText(this.getY()+"");
		Element width = areaPosition.addElement("Width");
		width.addText(this.getWidth()+"");
		Element height = areaPosition.addElement("Height");
		height.addText(this.getHeight()+"");
		Element cellInformation = tmp.addElement("SimplifiedPosition");
		Element splitedRows = cellInformation.addElement("SimplifiedHeight");
		Element splitedCols = cellInformation.addElement("SimplifiedWidth");
		splitedRows.addText(this.getSplitedRows()+"");
		splitedCols.addText(this.getSplitedCols()+"");
		Element rowNo = cellInformation.addElement("SimplifedY");
		rowNo.addText(this.getRowNo()+"");
		Element colNo = cellInformation.addElement("SimplifedX");
		colNo.addText(this.getColNo()+"");
		Element links = tmp.addElement("Links");
		Element rightLink = links.addElement("NextCellInTheSameRow");
		if(this.getRight()!=null)
			rightLink.addText(this.getRight().getAreaNo()+"");
		Element downLink = links.addElement("NextCellInTheSameColumn");
		if(this.getDown()!=null)
			downLink.addText(this.getDown().getAreaNo()+"");
		Element text = tmp.addElement("Text");
		text.addAttribute("Content", this.getString());
		/*for(int j = 0; j < lines.size(); j++)
			lines.get(j).writeToXML(text);*/
		/*for(int j = 0; j < groups.size(); j++)
			groups.get(j).writeToXML(text);
		for(int j = 0; j < this.textSize(); j++){
			this.getCharacter(j).writeToXML(text);
		}*/
		/*if(this.nullText() == false)
			for(int j = 0; j < this.textSize(); j++){
				TextObject to = this.getText(j);
				Element text = tmp.addElement("Text");
				Element content = text.addElement("Content");
				content.addText(to.getString());
				Element position = text.addElement("TextPosition");
				Element x = position.addElement("X");
				x.addText(to.getX()+"");
				Element y = position.addElement("Y");
				y.addText(to.getY()+"");
			}*/
	}



	/*public void setText(String text) throws IOException {
		// TODO Auto-generated method stub
		TextObject to = new TextObject();
		to.setString(text);
		texts.add(to);
	}*/
	
}
