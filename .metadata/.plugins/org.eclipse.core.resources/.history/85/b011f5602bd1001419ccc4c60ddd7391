package src.tool;

import java.awt.geom.Rectangle2D;
import java.io.IOException;
import java.io.StringWriter;
import java.util.*;

import org.apache.pdfbox.cos.COSStream;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.common.PDStream;
import org.apache.pdfbox.util.PDFTextStripper;
import org.apache.pdfbox.util.TextPosition;

public class TextStripperByRectangleObject extends PDFTextStripper {
	private List<Integer> regions = new ArrayList<Integer>();
    private Map<Integer,RectangleObject> regionArea = new HashMap<Integer,RectangleObject>();
    private Map<Integer,Vector<ArrayList<TextPosition>>> regionCharacterList = 
        new HashMap<Integer,Vector<ArrayList<TextPosition>>>();
    private Map<Integer,StringWriter> regionText = new HashMap<Integer,StringWriter>();

	
	//@SuppressWarnings("deprecation")
	public TextStripperByRectangleObject() throws IOException {
		super();
		// TODO Auto-generated constructor stub
		super.setPageSeparator( "" );
	}
	
	public void addRegion( int areaNo, RectangleObject rect )
    {
        regions.add( new Integer(areaNo) );
        regionArea.put( new Integer(areaNo), rect );
    }
	
	 public String getTextForRegion( int no ){
	        StringWriter text = regionText.get( new Integer(no) );
	        return text.toString();
	 }
	 
	 public void extractRegions( PDPage page ) throws IOException{
	        Iterator<Integer> regionIter = regions.iterator();
	        while( regionIter.hasNext() )
	        {
	            setStartPage(getCurrentPageNo());
	            setEndPage(getCurrentPageNo());
	            //reset the stored text for the region so this class
	            //can be reused.
	            Integer regionNo = regionIter.next();
	            Vector<ArrayList<TextPosition>> regionCharactersByArticle = new Vector<ArrayList<TextPosition>>();
	            regionCharactersByArticle.add( new ArrayList<TextPosition>() );
	            regionCharacterList.put( regionNo, regionCharactersByArticle );
	            regionText.put( regionNo, new StringWriter() );
	        }

	        PDStream contentStream = page.getContents();
	        if( contentStream != null )
	        {
	            COSStream contents = contentStream.getStream();
	            processPage( page, contents );
	        }
	    }

}
