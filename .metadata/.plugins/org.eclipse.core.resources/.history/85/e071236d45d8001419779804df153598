package src.tool;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.pdfbox.pdmodel.PDPage;

public class ContentStreamParser {
	private int pageNo;
	private PDPage pdpage;
	private TokenParser tp;
	private List<PageTextArea> pta;
	private TextStripperByPDFRectangle tsbro;
	private List<TableInformation> ti;
	
	public ContentStreamParser(int no, PDPage pdp) throws IOException{
		pageNo = no;
		pdpage = pdp;
		
		tp = new TokenParser(pdpage.getContents().getStream().getStreamTokens());
		tsbro = new TextStripperByPDFRectangle();
		pta = new ArrayList<PageTextArea>();
		
		ti - new List<TableInformation>();
	}
	
	public void parse() throws IOException{
		pta = this.TextAreaConstructor();
	}

	public List<PageTextArea> TextAreaConstructor() throws IOException{
		Map<Integer, PDFRectangle> areas = tp.getAreas();
		List<PageTextArea> textAreas = this.constructRegions(areas);

		for(int i = 0; i < tp.getSize(); i++){
			if(areas.containsKey(new Integer(i))){
				tsbro.addRegion(i, areas.get(new Integer(i)));
			}
		}
		
		/*if(last !=0 && areas != null){
			PDFRectangle lastRo = areas.get(new Integer(last));
			double y = lastRo.getYofLeftUpper() - lastRo.getHeight();
			double w = pdpage.getArtBox().getWidth();
			PDFRectangle extra = new PDFRectangle(0,0,w,y);
			tsbro.addRegion(-1, extra);
		}*/
		
		tsbro.extractRegions(pdpage);
		attachTexts(textAreas);
		return textAreas;
	}
	
	private List<PageTextArea> constructRegions(Map<Integer, PDFRectangle> areas){
		List<PageTextArea> textAreas = new ArrayList<PageTextArea>();
		for(int i = 0; i < tp.getSize(); i++)
			if(areas.containsKey(new Integer(i))){
				textAreas.add(new PageTextArea(i, areas.get(new Integer(i))));
				//System.out.println(i);
			}
		for(int i = 0; i < textAreas.size(); i++)
			for(int j = i+1 ; j < textAreas.size(); j++){
				if( textAreas.get(i).getRight() == null && textAreas.get(i).nextColumnInTheSameRow(textAreas.get(j))){
					textAreas.get(i).setRight(textAreas.get(j));
					textAreas.get(j).setReferenced(true);
				}
				else if( textAreas.get(i).getDown() == null && textAreas.get(i).nextRowInTheSameColumn(textAreas.get(j))){
					textAreas.get(i).setDown(textAreas.get(j));
					textAreas.get(j).setReferenced(true);
				}
			}
		return textAreas;
	}
	
	private void attachTexts(List<PageTextArea> textAreas){
		for(int i = 0; i < textAreas.size(); i++){
			int no = textAreas.get(i).getAreaNo();
			List<PDFCharacter> cs = tsbro.getCharactersByRegion(no);
			textAreas.get(i).setCharacters(this.tsbro.getCharactersByRegion(no));
		}
	}
	
	public double round(double a, int n){
		BigDecimal b = new BigDecimal(a);
		double f = b.setScale(n, BigDecimal.ROUND_HALF_UP).doubleValue();
		return f;
	}
	
	public boolean alreadyEqual(double a, double b, double err){
		if(Math.abs(a-b) <= err)
			return true;
		return false;
	}
	
	public List<PageTextArea> getPTA(){
		return pta;
	}
	
	public List<TableInformation> extractTableInformation(){
		List<TableInformation> ti = new ArrayList<TableInformation>();
		for(int i = 0; i < pta.size(); i++){
			if(!pta.get(i).isReferenced()){
				if(!pta.get(i).isIsolated()){
					PageTextArea head = pta.get(i);
					PageTextArea current = head;
					List<Float> ls1 = new ArrayList<Float>();
					List<Float> ls2 = new ArrayList<Float>();
					List<String> ls3 = new ArrayList<String>();
					int count1 = 0;
					int count2 = 0;
					while(current != null){
						count1++;
						ls1.add(new Float(current.getX()));
						ls3.add(current.getString());
						current = current.getRight();
					}
					current = head;
					while(current.getDown()!=null)
						current = current.getDown();
					while(current!=null){
						count2++;
						ls2.add(new Float(current.getX()));
						PageTextArea tmp = current.getRight();
						if(tmp!=null){
							while(tmp.getDown() != null)
								tmp = tmp.getDown();
							current = tmp;
						}
						else
							break;
					}
					ti.add(new TableInformation(count1,count2,ls1,ls2,ls3));
				}
			}
		}
		return ti;
	}
	
	public boolean extraTextsAfterLastTable(){
		if(tsbro.contain(-1)){
			String text = tsbro.getTextForRegion(-1);
			if(text.equals(" "))
				return false;
		}
		return true;
	}
}
