package src.tool;

import java.util.ArrayList;
import java.util.List;


/**
 * This class stores the projections of text areas on a vertical or a horizontal line.
 * @author zqliu
 * @version 1.0
 */
public class LineSegments {
	boolean vertical;
	double startPoint;
	double endPoint;
	List<Double> positions;
	
	/**
	 * The type of this class (horizontal or vertical) must be specified when it is initialized.
	 * @param v true, if want to project areas on a vertical line.
	 * @param sp The value that will be assigned to start point.
	 * @param ep The value that will be assigned to end point.
	 */
	public LineSegments(boolean v, double sp, double ep){
		vertical = v;
		startPoint = sp;
		endPoint = ep;
		positions = new ArrayList<Double>();
	}

	/**
	 * Get method of vertical
	 * @return true, if this class is constructed for a vertical line.
	 */
	public boolean isVertical() {
		return vertical;
	}

	/**
	 * Set the start point of this line.
	 * @param startPoint The value of the start point. Min X or Max Y
	 */
	public void setStartPoint(double startPoint) {
		this.startPoint = startPoint;
	}

	/**
	 * Set the end point of this line.
	 * @param endPoint The value of the end point. Max X or Min Y.
	 */
	public void setEndPoint(double endPoint) {
		this.endPoint = endPoint;
	}
	
	/**
	 * Add a new position into the list. 
	 * Ensure that this value is between 
	 * last inserted position( or the 
	 * start point) and end point. Usually 
	 * the line formed by the start point and
	 * the first element of the list will be
	 * blank, which means there is no area that 
	 * will be projected to this segment. 
	 * @param d The point want to insert.
	 */
	public void addPosition(double d){
		double a;
		if(positions.size() == 0 )
			a = startPoint;
		else
			a = positions.get(positions.size()-1);
		if(a < d 
				&& d < endPoint)
			positions.add(new Double(d));
	}
}
