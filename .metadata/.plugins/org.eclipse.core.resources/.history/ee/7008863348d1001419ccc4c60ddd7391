package src.tool;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javafx.scene.control.TextArea;

import org.apache.pdfbox.pdfparser.PDFStreamParser;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.common.PDStream;
import org.apache.pdfbox.util.PDFOperator;
import org.apache.pdfbox.util.PDFTextStripperByArea;
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;

public class PageStreamParser {
	private int pageNo;
	private PDStream content;
	private ContentStreamParser csp;
	private List<PageTextArea> pta;
	
	public PageStreamParser(int a, PDPage pdp) throws IOException{
		pageNo = a;
		content = pdp.getContents();

		csp = new ContentStreamParser(pdp);
		
		
		pta = csp.getPTA();
	}
	
	public PDStream getPDStream(){
		return content;
	}
	
	public void print(){
		System.out.println("Page "+pageNo+" :");
		//tp.print();
		/*for(int i = 0; i < pta.size(); i++){
			System.out.print(i + ": ");
			pta.get(i).print();
		}*/
		/*ArrayList<ArrayList<Integer>> table = restoreTable();
		for(int i = 0; i < table.size(); i++){
			ArrayList<Integer> it = table.get(i);
			for(int j = 0; j < it.size(); j++){
				System.out.print(it.get(j) +"\t");
			}
			System.out.println();
		}*/
	}
	
	/*public ArrayList<ArrayList<Integer>> restoreTable(){
		ArrayList<ArrayList<Integer>> table = new ArrayList<ArrayList<Integer>>();
		ArrayList<Integer> currentLine = new ArrayList<Integer>();
		for(int i = 0; i < pta.size(); i++){
			if(i == 0){
				currentLine.add(new Integer(pta.get(0).getAreaNo()));
				table.add(currentLine);
			}
			else{
				if( pta.get(i-1).isSameRow(pta.get(i)))
					currentLine.add(pta.get(i).getAreaNo());
				else{
					currentLine = new ArrayList<Integer>();
					currentLine.add(pta.get(i).getAreaNo());
					table.add(currentLine);
				}
			}
		}
		return table;
	}*/
	
	
	
	/*public void test(){
			areas.get(new Integer(100122)).print();
			areas.get(new Integer(100239)).print();
			areas.get(new Integer(100302)).print();
			areas.get(new Integer(100821)).print();
			areas.get(new Integer(100888)).print();
	}*/
	
	public void writeXML(Element pageRoot){
		//int currentRow = 0;
		Element currentTable = null;
		int count = 0;
		//System.out.println("Page :"+pageNo);
		for(int i = 0; i < pta.size(); i++){
			/*if(pta.get(i).getRowNo() != currentRow || currentLine == null){
				currentLine = pageRoot.addElement("Row");
				currentRow = pta.get(i).getRowNo();
				currentLine.addAttribute("Num", currentRow + "");
			}*/
			if(!pta.get(i).isReferenced()){
				if(!pta.get(i).isIsolated()){
					currentTable = pageRoot.addElement("Table");
					count++;
					currentTable.addAttribute("No.", count+"");
					//System.out.println("Head: "+pta.get(i).getAreaNo());
				}
			}
			if(currentTable != null){
				Element tmp = currentTable.addElement("Cell");
				tmp.addAttribute("No", pta.get(i).getAreaNo()+"");
				Element areaPosition = tmp.addElement("AreaPosition");
				Element xOfLeftUpper = areaPosition.addElement("XofLeftUpper");
				xOfLeftUpper.addText(pta.get(i).getX()+"");
				Element yOfLeftUpper = areaPosition.addElement("YofLeftUpper");
				yOfLeftUpper.addText(pta.get(i).getY()+"");
				Element width = areaPosition.addElement("Width");
				width.addText(pta.get(i).getWidth()+"");
				Element height = areaPosition.addElement("Height");
				height.addText(pta.get(i).getHeight()+"");
				Element cellInformation = tmp.addElement("CellInformation");
				Element splitedRows = cellInformation.addElement("SplitedRows");
				Element splitedCols = cellInformation.addElement("SplitedColumns");
				splitedRows.addText(pta.get(i).getSplitedRows()+"");
				splitedCols.addText(pta.get(i).getSplitedCols()+"");
				Element rowNo = cellInformation.addElement("RowNo");
				rowNo.addText(pta.get(i).getRowNo()+"");
				Element colNo = cellInformation.addElement("ColumnNo");
				colNo.addText(pta.get(i).getColNo()+"");
				/*Element rowNo = tmp.addElement("Row No");
				rowNo.addText(pta.get(i).getRowNo()+"");
				Element colNo = tmp.addElement("Column No");
				colNo.addText(pta.get(i).getColNo()+"");
				Element sRow = tmp.addElement("Splited Rows");
				sRow.addText(pta.get(i).getSplitedRows()+"");
				Element sCol = tmp.addElement("Splited Columns");
				sCol.addText(pta.get(i).getSplitedCols()+"");*/
				Element links = tmp.addElement("Links");
				Element rightLink = links.addElement("NextCellInTheSameRow");
				if(pta.get(i).getRight()!=null)
					rightLink.addText(pta.get(i).getRight().getAreaNo()+"");
				Element downLink = links.addElement("NextCellInTheSameColumn");
				if(pta.get(i).getDown()!=null)
					downLink.addText(pta.get(i).getDown().getAreaNo()+"");
				if(pta.get(i).nullText() == false)
					for(int j = 0; j < pta.get(i).textSize(); j++){
						TextObject to = pta.get(i).getText(j);
						Element text = tmp.addElement("Text");
						Element content = text.addElement("Content");
						content.addText(to.getString());
						Element position = text.addElement("TextPosition");
						Element x = position.addElement("X");
						x.addText(to.getX()+"");
						Element y = position.addElement("Y");
						y.addText(to.getY()+"");
					}
				//tmp.addText("Column :" + (new Integer(pta.get(i).getColNo())).toString());
			}
		}
		//System.out.println();
	}
	
	

}
